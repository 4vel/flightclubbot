import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from db.utils import add_destination, check_existing_destination, remove_existing_destination
from loader import dp
from states.destination import DestinationCity
from app import session, iata_name_dict, city_code_lists
from sqlalchemy.exc import SQLAlchemyError


@dp.message_handler(Command("add_destination_city"))
async def enter_form_city(message: types.Message):
    msg = """
    –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã
    """

    await message.answer(msg)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ \n")
    await DestinationCity.Q1.set()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–∫–µ
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω —Å —Ç–∞–∫–∏–º –≥–æ—Ä–æ–¥–æ–º
    # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É


@dp.message_handler(state=DestinationCity.Q1)
async def answer_q1_city(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö \n")
    await DestinationCity.next()


@dp.message_handler(state=DestinationCity.Q2)
async def answer_q2_city(message: types.Message, state: FSMContext):

    answer = message.text
    await state.update_data(answer2 = answer)

    data = await state.get_data()
    city_name = data.get("answer1")
    city_name_low = city_name.lower()
    price = data.get("answer2")
    user = str(message.from_user.id)
    logging.info(f"{city_name} {price} {user}")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    if city_code_lists.get(city_name_low):
        list_of_codes = city_code_lists.get(city_name_low)
        if len(list_of_codes) == 1:
            try:
                city_code = city_code_lists.get(city_name_low)[0]
                if check_existing_destination(session, user, city_code):
                    remove_existing_destination(session, user, city_code)
                add_destination(session, user, city_code, price)

                await message.answer("–î–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏—Å–æ–∫!")
                await message.answer(f"–ì–æ—Ä–æ–¥ - {city_name} {city_code}")
                await message.answer(f"–¶–µ–Ω–∞ - {price} ‚ÇΩ")
                await message.answer(f"–ï—â–µ –≥–æ—Ä–æ–¥? üëâ /add_destination_city")
                await state.reset_state()

            except SQLAlchemyError as e:
                logging.info(f'SQLAlchemyError {e}')
                await message.answer("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
                await state.reset_state()
        else:
            await message.answer("–í —Å–ø–∏—Å–∫–µ IATA –∫–æ–¥–æ–≤ –≥–æ—Ä–æ–¥–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ")
            msg = "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –∏ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /add_destination "
            await message.answer(msg)
            for x in list_of_codes:
                msg = x + ' ' + iata_name_dict.get(x)
                await message.answer(msg)
            await state.reset_state()

    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        await state.reset_state()




