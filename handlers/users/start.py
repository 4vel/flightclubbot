import logging
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from db.models import TableUserAirports, TableUsers
from db.utils import add_airport_origin
from states.form import FormBaseAeroport
from app import session, iata_name_dict
from loader import dp


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    msg = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –•–æ—á–µ—à—å —É–ª–µ—Ç–µ—Ç—å? ‚úàÔ∏è " \
          "FlightClubber –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ —Ç–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∫–∞–∂–µ—à—å. " \
          "–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –∏ –¥–æ–±–∞–≤—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. " \
          "–ö–∞–∫ —Ç–æ–ª—å–∫–æ FlightClubber –Ω–∞–π–¥–µ—Ç –±–∏–ª–µ—Ç –¥–µ—à–µ–≤–ª–µ, —Ç—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
    await message.answer(msg)
    # await message.answer(f'–¢–≤–æ–π user_id {message.from_user.id}')
    await message.answer(f'–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    await FormBaseAeroport.Q1.set()


@dp.message_handler(state=FormBaseAeroport.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    airport_origin = message.text.upper()
    if iata_name_dict.get(airport_origin):

        await state.update_data(answer1=airport_origin)
        await message.answer(f"–ê—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω - {airport_origin} {iata_name_dict.get(airport_origin)}")
        user_id = str(message.from_user.id)
        user_fullname = str(message.from_user.full_name)
        add_airport_origin(session, user_id, user_fullname, airport_origin)



        await message.answer(f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã üëâ/add_destination_city")
        await state.reset_state()

    else:
        await message.answer(f'–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.')
        await state.reset_state()
