from datetime import datetime, timedelta
from apscheduler.schedulers.blocking import BlockingScheduler
from flight_app.data_manager import DataManager
from flight_app.flight_search import FlightSearch
from flight_app.notification import NotificationManager
from config import BOT_TOKEN, ADMIN_ID, conn_string
from db.models import DataAccessLayer, TableUsers

data_manager = DataManager()
sched = BlockingScheduler()
notification_manager = NotificationManager(BOT_TOKEN)
message_cache = []

def get_data_pack(db_session, user_id):
    """
    data_package –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã –¥–ª—è

    :param db_session:
    :param user_id:
    :return:
    """

    data_package = {
        "user": user_id,
        "sheet_data": data_manager.get_destination_data_db(db_session, user_id),
        "flight_search": FlightSearch(),
        "notification_manager": notification_manager,
        "ORIGIN_CITY_IATA": data_manager.get_origin_airport(db_session, user_id),
        "tomorrow": datetime.now() + timedelta(days = 1),
        "six_month_from_today": datetime.now() + timedelta(days = (6 * 30)),
    }
    return data_package


def get_list_of_users(db_session):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π """

    return [u.user_id for u in db_session.query(TableUsers).distinct()]


def search_flights(data_pack, period, msg_cache):
    for destination in data_pack["sheet_data"]:

        if period == "long":
            flight = data_pack["flight_search"].check_flights(
                data_pack["ORIGIN_CITY_IATA"],
                destination["IATA Code"],
                from_time = data_pack["tomorrow"],
                to_time = data_pack["six_month_from_today"]
            )
        else:
            flight = data_pack["flight_search"].check_flights_short(
                data_pack["ORIGIN_CITY_IATA"],
                destination["IATA Code"],
                from_time = data_pack["tomorrow"],
                to_time = data_pack["six_month_from_today"]
            )
        print(flight)
        if flight:
            print(flight.price, destination["Lowest Price"])
            if flight.price < destination["Lowest Price"]:

                msg = ""
                if flight.check_weekend_plus():
                    msg += "–í—ã—Ö–æ–¥–Ω—ã–µ –ø–ª—é—Å 1! \n"
                elif flight.check_weekend():
                    msg += "–í—ã—Ö–æ–¥–Ω—ã–µ!\n"

                msg += f"–ü–µ—Ä–µ–ª–µ—Ç –∏–∑ {flight.origin_city}-{flight.origin_airport} "
                msg += f"–≤ {flight.destination_city}-{flight.destination_airport} –∑–∞ {flight.price} —Ä—É–±–ª–µ–π.\n"
                # msg += f" –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è {flight.airline} —Ä–µ–π—Å {flight.flight_no }.\n"
                msg += f"–î–∞—Ç—ã: {flight.out_date} ({flight.out_date_weekday})"
                msg += f"- {flight.return_date} ({flight.return_date_weekday}).\n "
                msg += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {flight.duration_days} –¥"

                if msg not in msg_cache:
                    data_pack["notification_manager"].send_sms(data_pack['user'], message = msg)
                    msg_cache.append(msg)




def checkflighs_short(db_session):
    """
    –ò—â–µ—Ç –±–∏–ª–µ—Ç—ã —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
    —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤
    –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞–ø–∞–∫–∏
    –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è search_flights –ø–æ –∫–∞–∂–¥–æ–º—É
    """

    list_of_users = get_list_of_users(db_session)
    list_of_users_datapackages = []

    for user in list_of_users:
        data_pack = get_data_pack(db_session, user)
        if data_pack.get("sheet_data"):
            list_of_users_datapackages.append(data_pack)

    for dp in list_of_users_datapackages:
        search_flights(dp, "short", message_cache)


def checkflights_long(db_session):
    """
    –ò—â–µ—Ç –±–∏–ª–µ—Ç—ã —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤
    –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞–ø–∞–∫–∏
    –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è search_flights –ø–æ –∫–∞–∂–¥–æ–º—É
    """

    list_of_users = get_list_of_users(db_session)
    list_of_users_datapackages = []

    for user in list_of_users:
        data_pack = get_data_pack(db_session, user)
        if data_pack.get("sheet_data"):
            list_of_users_datapackages.append(data_pack)

    for dp in list_of_users_datapackages:
        search_flights(dp, "long", message_cache)


def healthcheck():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–¥–µ—á–∫–æ –∞–¥–º–∏–Ω—É"""

    notification_manager.send_sms(ADMIN_ID, "üíü")


if __name__ == "__main__":
    dal = DataAccessLayer(conn_string)
    session = dal.get_session()
    data_manager = DataManager()
    notification_manager = NotificationManager(BOT_TOKEN)

    sched.add_job(checkflighs_short, 'interval', minutes = 5, args = [session])
    sched.add_job(checkflights_long, 'interval', minutes = 7, args = [session])
    sched.add_job(healthcheck, 'interval', hours = 24)
    sched.start()
